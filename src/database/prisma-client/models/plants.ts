
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `plants` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model plants
 * 
 */
export type plantsModel = runtime.Types.Result.DefaultSelection<Prisma.$plantsPayload>

export type AggregatePlants = {
  _count: PlantsCountAggregateOutputType | null
  _avg: PlantsAvgAggregateOutputType | null
  _sum: PlantsSumAggregateOutputType | null
  _min: PlantsMinAggregateOutputType | null
  _max: PlantsMaxAggregateOutputType | null
}

export type PlantsAvgAggregateOutputType = {
  id: number | null
  height: number | null
  spread: number | null
}

export type PlantsSumAggregateOutputType = {
  id: number | null
  height: number | null
  spread: number | null
}

export type PlantsMinAggregateOutputType = {
  id: number | null
  code: string | null
  latin: string | null
  name: string | null
  type: string | null
  zone: string | null
  native: string | null
  droughtTolerant: boolean | null
  floodTolerant: boolean | null
  height: number | null
  spread: number | null
  saltTolerance: string | null
  family: string | null
  genus: string | null
  species: string | null
  functionalGroup: string | null
  sunTolerance: string | null
  bloom: string | null
}

export type PlantsMaxAggregateOutputType = {
  id: number | null
  code: string | null
  latin: string | null
  name: string | null
  type: string | null
  zone: string | null
  native: string | null
  droughtTolerant: boolean | null
  floodTolerant: boolean | null
  height: number | null
  spread: number | null
  saltTolerance: string | null
  family: string | null
  genus: string | null
  species: string | null
  functionalGroup: string | null
  sunTolerance: string | null
  bloom: string | null
}

export type PlantsCountAggregateOutputType = {
  id: number
  code: number
  latin: number
  name: number
  type: number
  zone: number
  native: number
  droughtTolerant: number
  floodTolerant: number
  height: number
  spread: number
  saltTolerance: number
  family: number
  genus: number
  species: number
  functionalGroup: number
  sunTolerance: number
  bloom: number
  _all: number
}


export type PlantsAvgAggregateInputType = {
  id?: true
  height?: true
  spread?: true
}

export type PlantsSumAggregateInputType = {
  id?: true
  height?: true
  spread?: true
}

export type PlantsMinAggregateInputType = {
  id?: true
  code?: true
  latin?: true
  name?: true
  type?: true
  zone?: true
  native?: true
  droughtTolerant?: true
  floodTolerant?: true
  height?: true
  spread?: true
  saltTolerance?: true
  family?: true
  genus?: true
  species?: true
  functionalGroup?: true
  sunTolerance?: true
  bloom?: true
}

export type PlantsMaxAggregateInputType = {
  id?: true
  code?: true
  latin?: true
  name?: true
  type?: true
  zone?: true
  native?: true
  droughtTolerant?: true
  floodTolerant?: true
  height?: true
  spread?: true
  saltTolerance?: true
  family?: true
  genus?: true
  species?: true
  functionalGroup?: true
  sunTolerance?: true
  bloom?: true
}

export type PlantsCountAggregateInputType = {
  id?: true
  code?: true
  latin?: true
  name?: true
  type?: true
  zone?: true
  native?: true
  droughtTolerant?: true
  floodTolerant?: true
  height?: true
  spread?: true
  saltTolerance?: true
  family?: true
  genus?: true
  species?: true
  functionalGroup?: true
  sunTolerance?: true
  bloom?: true
  _all?: true
}

export type PlantsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which plants to aggregate.
   */
  where?: Prisma.plantsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of plants to fetch.
   */
  orderBy?: Prisma.plantsOrderByWithRelationInput | Prisma.plantsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.plantsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` plants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` plants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned plants
  **/
  _count?: true | PlantsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PlantsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PlantsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PlantsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PlantsMaxAggregateInputType
}

export type GetPlantsAggregateType<T extends PlantsAggregateArgs> = {
      [P in keyof T & keyof AggregatePlants]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePlants[P]>
    : Prisma.GetScalarType<T[P], AggregatePlants[P]>
}




export type plantsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.plantsWhereInput
  orderBy?: Prisma.plantsOrderByWithAggregationInput | Prisma.plantsOrderByWithAggregationInput[]
  by: Prisma.PlantsScalarFieldEnum[] | Prisma.PlantsScalarFieldEnum
  having?: Prisma.plantsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PlantsCountAggregateInputType | true
  _avg?: PlantsAvgAggregateInputType
  _sum?: PlantsSumAggregateInputType
  _min?: PlantsMinAggregateInputType
  _max?: PlantsMaxAggregateInputType
}

export type PlantsGroupByOutputType = {
  id: number
  code: string
  latin: string
  name: string
  type: string | null
  zone: string | null
  native: string | null
  droughtTolerant: boolean | null
  floodTolerant: boolean | null
  height: number | null
  spread: number | null
  saltTolerance: string | null
  family: string | null
  genus: string | null
  species: string | null
  functionalGroup: string | null
  sunTolerance: string | null
  bloom: string | null
  _count: PlantsCountAggregateOutputType | null
  _avg: PlantsAvgAggregateOutputType | null
  _sum: PlantsSumAggregateOutputType | null
  _min: PlantsMinAggregateOutputType | null
  _max: PlantsMaxAggregateOutputType | null
}

type GetPlantsGroupByPayload<T extends plantsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PlantsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PlantsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PlantsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PlantsGroupByOutputType[P]>
      }
    >
  >



export type plantsWhereInput = {
  AND?: Prisma.plantsWhereInput | Prisma.plantsWhereInput[]
  OR?: Prisma.plantsWhereInput[]
  NOT?: Prisma.plantsWhereInput | Prisma.plantsWhereInput[]
  id?: Prisma.IntFilter<"plants"> | number
  code?: Prisma.StringFilter<"plants"> | string
  latin?: Prisma.StringFilter<"plants"> | string
  name?: Prisma.StringFilter<"plants"> | string
  type?: Prisma.StringNullableFilter<"plants"> | string | null
  zone?: Prisma.StringNullableFilter<"plants"> | string | null
  native?: Prisma.StringNullableFilter<"plants"> | string | null
  droughtTolerant?: Prisma.BoolNullableFilter<"plants"> | boolean | null
  floodTolerant?: Prisma.BoolNullableFilter<"plants"> | boolean | null
  height?: Prisma.FloatNullableFilter<"plants"> | number | null
  spread?: Prisma.FloatNullableFilter<"plants"> | number | null
  saltTolerance?: Prisma.StringNullableFilter<"plants"> | string | null
  family?: Prisma.StringNullableFilter<"plants"> | string | null
  genus?: Prisma.StringNullableFilter<"plants"> | string | null
  species?: Prisma.StringNullableFilter<"plants"> | string | null
  functionalGroup?: Prisma.StringNullableFilter<"plants"> | string | null
  sunTolerance?: Prisma.StringNullableFilter<"plants"> | string | null
  bloom?: Prisma.StringNullableFilter<"plants"> | string | null
}

export type plantsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  latin?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrderInput | Prisma.SortOrder
  zone?: Prisma.SortOrderInput | Prisma.SortOrder
  native?: Prisma.SortOrderInput | Prisma.SortOrder
  droughtTolerant?: Prisma.SortOrderInput | Prisma.SortOrder
  floodTolerant?: Prisma.SortOrderInput | Prisma.SortOrder
  height?: Prisma.SortOrderInput | Prisma.SortOrder
  spread?: Prisma.SortOrderInput | Prisma.SortOrder
  saltTolerance?: Prisma.SortOrderInput | Prisma.SortOrder
  family?: Prisma.SortOrderInput | Prisma.SortOrder
  genus?: Prisma.SortOrderInput | Prisma.SortOrder
  species?: Prisma.SortOrderInput | Prisma.SortOrder
  functionalGroup?: Prisma.SortOrderInput | Prisma.SortOrder
  sunTolerance?: Prisma.SortOrderInput | Prisma.SortOrder
  bloom?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type plantsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  code?: string
  AND?: Prisma.plantsWhereInput | Prisma.plantsWhereInput[]
  OR?: Prisma.plantsWhereInput[]
  NOT?: Prisma.plantsWhereInput | Prisma.plantsWhereInput[]
  latin?: Prisma.StringFilter<"plants"> | string
  name?: Prisma.StringFilter<"plants"> | string
  type?: Prisma.StringNullableFilter<"plants"> | string | null
  zone?: Prisma.StringNullableFilter<"plants"> | string | null
  native?: Prisma.StringNullableFilter<"plants"> | string | null
  droughtTolerant?: Prisma.BoolNullableFilter<"plants"> | boolean | null
  floodTolerant?: Prisma.BoolNullableFilter<"plants"> | boolean | null
  height?: Prisma.FloatNullableFilter<"plants"> | number | null
  spread?: Prisma.FloatNullableFilter<"plants"> | number | null
  saltTolerance?: Prisma.StringNullableFilter<"plants"> | string | null
  family?: Prisma.StringNullableFilter<"plants"> | string | null
  genus?: Prisma.StringNullableFilter<"plants"> | string | null
  species?: Prisma.StringNullableFilter<"plants"> | string | null
  functionalGroup?: Prisma.StringNullableFilter<"plants"> | string | null
  sunTolerance?: Prisma.StringNullableFilter<"plants"> | string | null
  bloom?: Prisma.StringNullableFilter<"plants"> | string | null
}, "id" | "code">

export type plantsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  latin?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrderInput | Prisma.SortOrder
  zone?: Prisma.SortOrderInput | Prisma.SortOrder
  native?: Prisma.SortOrderInput | Prisma.SortOrder
  droughtTolerant?: Prisma.SortOrderInput | Prisma.SortOrder
  floodTolerant?: Prisma.SortOrderInput | Prisma.SortOrder
  height?: Prisma.SortOrderInput | Prisma.SortOrder
  spread?: Prisma.SortOrderInput | Prisma.SortOrder
  saltTolerance?: Prisma.SortOrderInput | Prisma.SortOrder
  family?: Prisma.SortOrderInput | Prisma.SortOrder
  genus?: Prisma.SortOrderInput | Prisma.SortOrder
  species?: Prisma.SortOrderInput | Prisma.SortOrder
  functionalGroup?: Prisma.SortOrderInput | Prisma.SortOrder
  sunTolerance?: Prisma.SortOrderInput | Prisma.SortOrder
  bloom?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.plantsCountOrderByAggregateInput
  _avg?: Prisma.plantsAvgOrderByAggregateInput
  _max?: Prisma.plantsMaxOrderByAggregateInput
  _min?: Prisma.plantsMinOrderByAggregateInput
  _sum?: Prisma.plantsSumOrderByAggregateInput
}

export type plantsScalarWhereWithAggregatesInput = {
  AND?: Prisma.plantsScalarWhereWithAggregatesInput | Prisma.plantsScalarWhereWithAggregatesInput[]
  OR?: Prisma.plantsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.plantsScalarWhereWithAggregatesInput | Prisma.plantsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"plants"> | number
  code?: Prisma.StringWithAggregatesFilter<"plants"> | string
  latin?: Prisma.StringWithAggregatesFilter<"plants"> | string
  name?: Prisma.StringWithAggregatesFilter<"plants"> | string
  type?: Prisma.StringNullableWithAggregatesFilter<"plants"> | string | null
  zone?: Prisma.StringNullableWithAggregatesFilter<"plants"> | string | null
  native?: Prisma.StringNullableWithAggregatesFilter<"plants"> | string | null
  droughtTolerant?: Prisma.BoolNullableWithAggregatesFilter<"plants"> | boolean | null
  floodTolerant?: Prisma.BoolNullableWithAggregatesFilter<"plants"> | boolean | null
  height?: Prisma.FloatNullableWithAggregatesFilter<"plants"> | number | null
  spread?: Prisma.FloatNullableWithAggregatesFilter<"plants"> | number | null
  saltTolerance?: Prisma.StringNullableWithAggregatesFilter<"plants"> | string | null
  family?: Prisma.StringNullableWithAggregatesFilter<"plants"> | string | null
  genus?: Prisma.StringNullableWithAggregatesFilter<"plants"> | string | null
  species?: Prisma.StringNullableWithAggregatesFilter<"plants"> | string | null
  functionalGroup?: Prisma.StringNullableWithAggregatesFilter<"plants"> | string | null
  sunTolerance?: Prisma.StringNullableWithAggregatesFilter<"plants"> | string | null
  bloom?: Prisma.StringNullableWithAggregatesFilter<"plants"> | string | null
}

export type plantsCreateInput = {
  code: string
  latin: string
  name: string
  type?: string | null
  zone?: string | null
  native?: string | null
  droughtTolerant?: boolean | null
  floodTolerant?: boolean | null
  height?: number | null
  spread?: number | null
  saltTolerance?: string | null
  family?: string | null
  genus?: string | null
  species?: string | null
  functionalGroup?: string | null
  sunTolerance?: string | null
  bloom?: string | null
}

export type plantsUncheckedCreateInput = {
  id?: number
  code: string
  latin: string
  name: string
  type?: string | null
  zone?: string | null
  native?: string | null
  droughtTolerant?: boolean | null
  floodTolerant?: boolean | null
  height?: number | null
  spread?: number | null
  saltTolerance?: string | null
  family?: string | null
  genus?: string | null
  species?: string | null
  functionalGroup?: string | null
  sunTolerance?: string | null
  bloom?: string | null
}

export type plantsUpdateInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  latin?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  native?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  droughtTolerant?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  floodTolerant?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  height?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  spread?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  saltTolerance?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  family?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  species?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  functionalGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sunTolerance?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bloom?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type plantsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  code?: Prisma.StringFieldUpdateOperationsInput | string
  latin?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  native?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  droughtTolerant?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  floodTolerant?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  height?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  spread?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  saltTolerance?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  family?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  species?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  functionalGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sunTolerance?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bloom?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type plantsCreateManyInput = {
  id?: number
  code: string
  latin: string
  name: string
  type?: string | null
  zone?: string | null
  native?: string | null
  droughtTolerant?: boolean | null
  floodTolerant?: boolean | null
  height?: number | null
  spread?: number | null
  saltTolerance?: string | null
  family?: string | null
  genus?: string | null
  species?: string | null
  functionalGroup?: string | null
  sunTolerance?: string | null
  bloom?: string | null
}

export type plantsUpdateManyMutationInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  latin?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  native?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  droughtTolerant?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  floodTolerant?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  height?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  spread?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  saltTolerance?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  family?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  species?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  functionalGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sunTolerance?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bloom?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type plantsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  code?: Prisma.StringFieldUpdateOperationsInput | string
  latin?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  native?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  droughtTolerant?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  floodTolerant?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  height?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  spread?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  saltTolerance?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  family?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  genus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  species?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  functionalGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sunTolerance?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bloom?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type plantsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  latin?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  zone?: Prisma.SortOrder
  native?: Prisma.SortOrder
  droughtTolerant?: Prisma.SortOrder
  floodTolerant?: Prisma.SortOrder
  height?: Prisma.SortOrder
  spread?: Prisma.SortOrder
  saltTolerance?: Prisma.SortOrder
  family?: Prisma.SortOrder
  genus?: Prisma.SortOrder
  species?: Prisma.SortOrder
  functionalGroup?: Prisma.SortOrder
  sunTolerance?: Prisma.SortOrder
  bloom?: Prisma.SortOrder
}

export type plantsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  height?: Prisma.SortOrder
  spread?: Prisma.SortOrder
}

export type plantsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  latin?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  zone?: Prisma.SortOrder
  native?: Prisma.SortOrder
  droughtTolerant?: Prisma.SortOrder
  floodTolerant?: Prisma.SortOrder
  height?: Prisma.SortOrder
  spread?: Prisma.SortOrder
  saltTolerance?: Prisma.SortOrder
  family?: Prisma.SortOrder
  genus?: Prisma.SortOrder
  species?: Prisma.SortOrder
  functionalGroup?: Prisma.SortOrder
  sunTolerance?: Prisma.SortOrder
  bloom?: Prisma.SortOrder
}

export type plantsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  latin?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  zone?: Prisma.SortOrder
  native?: Prisma.SortOrder
  droughtTolerant?: Prisma.SortOrder
  floodTolerant?: Prisma.SortOrder
  height?: Prisma.SortOrder
  spread?: Prisma.SortOrder
  saltTolerance?: Prisma.SortOrder
  family?: Prisma.SortOrder
  genus?: Prisma.SortOrder
  species?: Prisma.SortOrder
  functionalGroup?: Prisma.SortOrder
  sunTolerance?: Prisma.SortOrder
  bloom?: Prisma.SortOrder
}

export type plantsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  height?: Prisma.SortOrder
  spread?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type NullableBoolFieldUpdateOperationsInput = {
  set?: boolean | null
}

export type NullableFloatFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type plantsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  code?: boolean
  latin?: boolean
  name?: boolean
  type?: boolean
  zone?: boolean
  native?: boolean
  droughtTolerant?: boolean
  floodTolerant?: boolean
  height?: boolean
  spread?: boolean
  saltTolerance?: boolean
  family?: boolean
  genus?: boolean
  species?: boolean
  functionalGroup?: boolean
  sunTolerance?: boolean
  bloom?: boolean
}, ExtArgs["result"]["plants"]>

export type plantsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  code?: boolean
  latin?: boolean
  name?: boolean
  type?: boolean
  zone?: boolean
  native?: boolean
  droughtTolerant?: boolean
  floodTolerant?: boolean
  height?: boolean
  spread?: boolean
  saltTolerance?: boolean
  family?: boolean
  genus?: boolean
  species?: boolean
  functionalGroup?: boolean
  sunTolerance?: boolean
  bloom?: boolean
}, ExtArgs["result"]["plants"]>

export type plantsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  code?: boolean
  latin?: boolean
  name?: boolean
  type?: boolean
  zone?: boolean
  native?: boolean
  droughtTolerant?: boolean
  floodTolerant?: boolean
  height?: boolean
  spread?: boolean
  saltTolerance?: boolean
  family?: boolean
  genus?: boolean
  species?: boolean
  functionalGroup?: boolean
  sunTolerance?: boolean
  bloom?: boolean
}, ExtArgs["result"]["plants"]>

export type plantsSelectScalar = {
  id?: boolean
  code?: boolean
  latin?: boolean
  name?: boolean
  type?: boolean
  zone?: boolean
  native?: boolean
  droughtTolerant?: boolean
  floodTolerant?: boolean
  height?: boolean
  spread?: boolean
  saltTolerance?: boolean
  family?: boolean
  genus?: boolean
  species?: boolean
  functionalGroup?: boolean
  sunTolerance?: boolean
  bloom?: boolean
}

export type plantsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "code" | "latin" | "name" | "type" | "zone" | "native" | "droughtTolerant" | "floodTolerant" | "height" | "spread" | "saltTolerance" | "family" | "genus" | "species" | "functionalGroup" | "sunTolerance" | "bloom", ExtArgs["result"]["plants"]>

export type $plantsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "plants"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    code: string
    latin: string
    name: string
    type: string | null
    zone: string | null
    native: string | null
    droughtTolerant: boolean | null
    floodTolerant: boolean | null
    height: number | null
    spread: number | null
    saltTolerance: string | null
    family: string | null
    genus: string | null
    species: string | null
    functionalGroup: string | null
    sunTolerance: string | null
    bloom: string | null
  }, ExtArgs["result"]["plants"]>
  composites: {}
}

export type plantsGetPayload<S extends boolean | null | undefined | plantsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$plantsPayload, S>

export type plantsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<plantsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PlantsCountAggregateInputType | true
  }

export interface plantsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['plants'], meta: { name: 'plants' } }
  /**
   * Find zero or one Plants that matches the filter.
   * @param {plantsFindUniqueArgs} args - Arguments to find a Plants
   * @example
   * // Get one Plants
   * const plants = await prisma.plants.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends plantsFindUniqueArgs>(args: Prisma.SelectSubset<T, plantsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__plantsClient<runtime.Types.Result.GetResult<Prisma.$plantsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Plants that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {plantsFindUniqueOrThrowArgs} args - Arguments to find a Plants
   * @example
   * // Get one Plants
   * const plants = await prisma.plants.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends plantsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, plantsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__plantsClient<runtime.Types.Result.GetResult<Prisma.$plantsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Plants that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {plantsFindFirstArgs} args - Arguments to find a Plants
   * @example
   * // Get one Plants
   * const plants = await prisma.plants.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends plantsFindFirstArgs>(args?: Prisma.SelectSubset<T, plantsFindFirstArgs<ExtArgs>>): Prisma.Prisma__plantsClient<runtime.Types.Result.GetResult<Prisma.$plantsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Plants that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {plantsFindFirstOrThrowArgs} args - Arguments to find a Plants
   * @example
   * // Get one Plants
   * const plants = await prisma.plants.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends plantsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, plantsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__plantsClient<runtime.Types.Result.GetResult<Prisma.$plantsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Plants that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {plantsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Plants
   * const plants = await prisma.plants.findMany()
   * 
   * // Get first 10 Plants
   * const plants = await prisma.plants.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const plantsWithIdOnly = await prisma.plants.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends plantsFindManyArgs>(args?: Prisma.SelectSubset<T, plantsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$plantsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Plants.
   * @param {plantsCreateArgs} args - Arguments to create a Plants.
   * @example
   * // Create one Plants
   * const Plants = await prisma.plants.create({
   *   data: {
   *     // ... data to create a Plants
   *   }
   * })
   * 
   */
  create<T extends plantsCreateArgs>(args: Prisma.SelectSubset<T, plantsCreateArgs<ExtArgs>>): Prisma.Prisma__plantsClient<runtime.Types.Result.GetResult<Prisma.$plantsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Plants.
   * @param {plantsCreateManyArgs} args - Arguments to create many Plants.
   * @example
   * // Create many Plants
   * const plants = await prisma.plants.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends plantsCreateManyArgs>(args?: Prisma.SelectSubset<T, plantsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Plants and returns the data saved in the database.
   * @param {plantsCreateManyAndReturnArgs} args - Arguments to create many Plants.
   * @example
   * // Create many Plants
   * const plants = await prisma.plants.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Plants and only return the `id`
   * const plantsWithIdOnly = await prisma.plants.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends plantsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, plantsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$plantsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Plants.
   * @param {plantsDeleteArgs} args - Arguments to delete one Plants.
   * @example
   * // Delete one Plants
   * const Plants = await prisma.plants.delete({
   *   where: {
   *     // ... filter to delete one Plants
   *   }
   * })
   * 
   */
  delete<T extends plantsDeleteArgs>(args: Prisma.SelectSubset<T, plantsDeleteArgs<ExtArgs>>): Prisma.Prisma__plantsClient<runtime.Types.Result.GetResult<Prisma.$plantsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Plants.
   * @param {plantsUpdateArgs} args - Arguments to update one Plants.
   * @example
   * // Update one Plants
   * const plants = await prisma.plants.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends plantsUpdateArgs>(args: Prisma.SelectSubset<T, plantsUpdateArgs<ExtArgs>>): Prisma.Prisma__plantsClient<runtime.Types.Result.GetResult<Prisma.$plantsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Plants.
   * @param {plantsDeleteManyArgs} args - Arguments to filter Plants to delete.
   * @example
   * // Delete a few Plants
   * const { count } = await prisma.plants.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends plantsDeleteManyArgs>(args?: Prisma.SelectSubset<T, plantsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Plants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {plantsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Plants
   * const plants = await prisma.plants.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends plantsUpdateManyArgs>(args: Prisma.SelectSubset<T, plantsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Plants and returns the data updated in the database.
   * @param {plantsUpdateManyAndReturnArgs} args - Arguments to update many Plants.
   * @example
   * // Update many Plants
   * const plants = await prisma.plants.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Plants and only return the `id`
   * const plantsWithIdOnly = await prisma.plants.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends plantsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, plantsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$plantsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Plants.
   * @param {plantsUpsertArgs} args - Arguments to update or create a Plants.
   * @example
   * // Update or create a Plants
   * const plants = await prisma.plants.upsert({
   *   create: {
   *     // ... data to create a Plants
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Plants we want to update
   *   }
   * })
   */
  upsert<T extends plantsUpsertArgs>(args: Prisma.SelectSubset<T, plantsUpsertArgs<ExtArgs>>): Prisma.Prisma__plantsClient<runtime.Types.Result.GetResult<Prisma.$plantsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Plants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {plantsCountArgs} args - Arguments to filter Plants to count.
   * @example
   * // Count the number of Plants
   * const count = await prisma.plants.count({
   *   where: {
   *     // ... the filter for the Plants we want to count
   *   }
   * })
  **/
  count<T extends plantsCountArgs>(
    args?: Prisma.Subset<T, plantsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PlantsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Plants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PlantsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PlantsAggregateArgs>(args: Prisma.Subset<T, PlantsAggregateArgs>): Prisma.PrismaPromise<GetPlantsAggregateType<T>>

  /**
   * Group by Plants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {plantsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends plantsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: plantsGroupByArgs['orderBy'] }
      : { orderBy?: plantsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, plantsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlantsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the plants model
 */
readonly fields: plantsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for plants.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__plantsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the plants model
 */
export interface plantsFieldRefs {
  readonly id: Prisma.FieldRef<"plants", 'Int'>
  readonly code: Prisma.FieldRef<"plants", 'String'>
  readonly latin: Prisma.FieldRef<"plants", 'String'>
  readonly name: Prisma.FieldRef<"plants", 'String'>
  readonly type: Prisma.FieldRef<"plants", 'String'>
  readonly zone: Prisma.FieldRef<"plants", 'String'>
  readonly native: Prisma.FieldRef<"plants", 'String'>
  readonly droughtTolerant: Prisma.FieldRef<"plants", 'Boolean'>
  readonly floodTolerant: Prisma.FieldRef<"plants", 'Boolean'>
  readonly height: Prisma.FieldRef<"plants", 'Float'>
  readonly spread: Prisma.FieldRef<"plants", 'Float'>
  readonly saltTolerance: Prisma.FieldRef<"plants", 'String'>
  readonly family: Prisma.FieldRef<"plants", 'String'>
  readonly genus: Prisma.FieldRef<"plants", 'String'>
  readonly species: Prisma.FieldRef<"plants", 'String'>
  readonly functionalGroup: Prisma.FieldRef<"plants", 'String'>
  readonly sunTolerance: Prisma.FieldRef<"plants", 'String'>
  readonly bloom: Prisma.FieldRef<"plants", 'String'>
}
    

// Custom InputTypes
/**
 * plants findUnique
 */
export type plantsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the plants
   */
  select?: Prisma.plantsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the plants
   */
  omit?: Prisma.plantsOmit<ExtArgs> | null
  /**
   * Filter, which plants to fetch.
   */
  where: Prisma.plantsWhereUniqueInput
}

/**
 * plants findUniqueOrThrow
 */
export type plantsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the plants
   */
  select?: Prisma.plantsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the plants
   */
  omit?: Prisma.plantsOmit<ExtArgs> | null
  /**
   * Filter, which plants to fetch.
   */
  where: Prisma.plantsWhereUniqueInput
}

/**
 * plants findFirst
 */
export type plantsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the plants
   */
  select?: Prisma.plantsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the plants
   */
  omit?: Prisma.plantsOmit<ExtArgs> | null
  /**
   * Filter, which plants to fetch.
   */
  where?: Prisma.plantsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of plants to fetch.
   */
  orderBy?: Prisma.plantsOrderByWithRelationInput | Prisma.plantsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for plants.
   */
  cursor?: Prisma.plantsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` plants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` plants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of plants.
   */
  distinct?: Prisma.PlantsScalarFieldEnum | Prisma.PlantsScalarFieldEnum[]
}

/**
 * plants findFirstOrThrow
 */
export type plantsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the plants
   */
  select?: Prisma.plantsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the plants
   */
  omit?: Prisma.plantsOmit<ExtArgs> | null
  /**
   * Filter, which plants to fetch.
   */
  where?: Prisma.plantsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of plants to fetch.
   */
  orderBy?: Prisma.plantsOrderByWithRelationInput | Prisma.plantsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for plants.
   */
  cursor?: Prisma.plantsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` plants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` plants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of plants.
   */
  distinct?: Prisma.PlantsScalarFieldEnum | Prisma.PlantsScalarFieldEnum[]
}

/**
 * plants findMany
 */
export type plantsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the plants
   */
  select?: Prisma.plantsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the plants
   */
  omit?: Prisma.plantsOmit<ExtArgs> | null
  /**
   * Filter, which plants to fetch.
   */
  where?: Prisma.plantsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of plants to fetch.
   */
  orderBy?: Prisma.plantsOrderByWithRelationInput | Prisma.plantsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing plants.
   */
  cursor?: Prisma.plantsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` plants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` plants.
   */
  skip?: number
  distinct?: Prisma.PlantsScalarFieldEnum | Prisma.PlantsScalarFieldEnum[]
}

/**
 * plants create
 */
export type plantsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the plants
   */
  select?: Prisma.plantsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the plants
   */
  omit?: Prisma.plantsOmit<ExtArgs> | null
  /**
   * The data needed to create a plants.
   */
  data: Prisma.XOR<Prisma.plantsCreateInput, Prisma.plantsUncheckedCreateInput>
}

/**
 * plants createMany
 */
export type plantsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many plants.
   */
  data: Prisma.plantsCreateManyInput | Prisma.plantsCreateManyInput[]
}

/**
 * plants createManyAndReturn
 */
export type plantsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the plants
   */
  select?: Prisma.plantsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the plants
   */
  omit?: Prisma.plantsOmit<ExtArgs> | null
  /**
   * The data used to create many plants.
   */
  data: Prisma.plantsCreateManyInput | Prisma.plantsCreateManyInput[]
}

/**
 * plants update
 */
export type plantsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the plants
   */
  select?: Prisma.plantsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the plants
   */
  omit?: Prisma.plantsOmit<ExtArgs> | null
  /**
   * The data needed to update a plants.
   */
  data: Prisma.XOR<Prisma.plantsUpdateInput, Prisma.plantsUncheckedUpdateInput>
  /**
   * Choose, which plants to update.
   */
  where: Prisma.plantsWhereUniqueInput
}

/**
 * plants updateMany
 */
export type plantsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update plants.
   */
  data: Prisma.XOR<Prisma.plantsUpdateManyMutationInput, Prisma.plantsUncheckedUpdateManyInput>
  /**
   * Filter which plants to update
   */
  where?: Prisma.plantsWhereInput
  /**
   * Limit how many plants to update.
   */
  limit?: number
}

/**
 * plants updateManyAndReturn
 */
export type plantsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the plants
   */
  select?: Prisma.plantsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the plants
   */
  omit?: Prisma.plantsOmit<ExtArgs> | null
  /**
   * The data used to update plants.
   */
  data: Prisma.XOR<Prisma.plantsUpdateManyMutationInput, Prisma.plantsUncheckedUpdateManyInput>
  /**
   * Filter which plants to update
   */
  where?: Prisma.plantsWhereInput
  /**
   * Limit how many plants to update.
   */
  limit?: number
}

/**
 * plants upsert
 */
export type plantsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the plants
   */
  select?: Prisma.plantsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the plants
   */
  omit?: Prisma.plantsOmit<ExtArgs> | null
  /**
   * The filter to search for the plants to update in case it exists.
   */
  where: Prisma.plantsWhereUniqueInput
  /**
   * In case the plants found by the `where` argument doesn't exist, create a new plants with this data.
   */
  create: Prisma.XOR<Prisma.plantsCreateInput, Prisma.plantsUncheckedCreateInput>
  /**
   * In case the plants was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.plantsUpdateInput, Prisma.plantsUncheckedUpdateInput>
}

/**
 * plants delete
 */
export type plantsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the plants
   */
  select?: Prisma.plantsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the plants
   */
  omit?: Prisma.plantsOmit<ExtArgs> | null
  /**
   * Filter which plants to delete.
   */
  where: Prisma.plantsWhereUniqueInput
}

/**
 * plants deleteMany
 */
export type plantsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which plants to delete
   */
  where?: Prisma.plantsWhereInput
  /**
   * Limit how many plants to delete.
   */
  limit?: number
}

/**
 * plants without action
 */
export type plantsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the plants
   */
  select?: Prisma.plantsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the plants
   */
  omit?: Prisma.plantsOmit<ExtArgs> | null
}
